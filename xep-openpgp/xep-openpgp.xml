<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY signcrypt "&lt;signcrypt/&gt;">
  <!ENTITY openpgp "&lt;openpgp/&gt;">
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>OpenPGP for XMPP</title>
  <abstract>Secifies end-to-end encryption of data with the help of
  OpenPGP, annoucement, discovery and retrieval of public keys and a
  mechanism to synchronize secret keys over multiple
  devices.</abstract>
  <legal>
    <copyright>This XMPP Extension Protocol is copyright (c) 1999 - 2015 by the XMPP Standards Foundation (XSF).</copyright>
    <permissions>Permission is hereby granted, free of charge, to any person obtaining a copy of this specification (the &quot;Specification&quot;), to make use of the Specification without restriction, including without limitation the rights to implement the Specification in a software program, deploy the Specification in a network service, and copy, modify, merge, publish, translate, distribute, sublicense, or sell copies of the Specification, and to permit persons to whom the Specification is furnished to do so, subject to the condition that the foregoing copyright notice and this permission notice shall be included in all copies or substantial portions of the Specification. Unless separate permission is granted, modified works that are redistributed shall not contain misleading information regarding the authors, title, number, or publisher of the Specification, and shall not claim endorsement of the modified works by the authors, any organization or project to which the authors belong, or the XMPP Standards Foundation.</permissions>
    <warranty>## NOTE WELL: This Specification is provided on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. In no event shall the XMPP Standards Foundation or the authors of this Specification be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the Specification or the implementation, deployment, or other use of the Specification. ##</warranty>
    <liability>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the XMPP Standards Foundation or any author of this Specification be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising out of the use or inability to use the Specification (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if the XMPP Standards Foundation or such author has been advised of the possibility of such damages.</liability>
    <conformance>This XMPP Extension Protocol has been contributed in full conformance with the XSF's Intellectual Property Rights Policy (a copy of which may be found at &lt;<link url='http://xmpp.org/extensions/ipr-policy.shtml'>http://xmpp.org/extensions/ipr-policy.shtml</link>&gt; or obtained by writing to XSF, P.O. Box 1641, Denver, CO 80201 USA).</conformance>
  </legal>
  <number>xxxx</number>
  <status>ProtoXEP</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0082</spec>
    <spec>XEP-0163</spec>
    <spec>XEP-0223</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>ox</shortname>
  <author>
    <firstname>Florian</firstname>
    <surname>Schmaus</surname>
    <email>flo@geekplace.eu</email>
    <jid>flo@geekplace.eu</jid>
  </author>
  <author>
    <firstname>Dominik</firstname>
    <surname>Schürman</surname>
    <email>dominik@dominikschuermann.de</email>
    <jid>dominik@dominikschuermann.de</jid>
  </author>
  <author>
    <firstname>Vincent</firstname>
    <surname>Breitmoser</surname>
    <email>look@my.amazin.horse</email>
    <jid>valodim@stratum0.org</jid>
  </author>
  <revision>
    <version>0.0.1alpha1</version>
    <date>2016-01-04</date>
    <initials>fs</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>

  <p>This XMPP extension protocol specifies end-to-end encryption of
  data with the help of OpenPGP.</p>

  <p>XMPP provides the mechanisms to solve a lot of issues that come
  with modern day OpenPGP usage. For example, based on &xep0163; this
  specification describes a standardized way to discovery OpenPGP
  public keys of other entities. But unlike the OpenPGP keyserver(s),
  this process establishes a strong relation between the key and the
  key's owning entity (usually a human user). A similar mechanism
  described herein allows to synchronize the secret key accross
  multiple devices.</p>

  <p>OpenPGP in return allows for end-to-end encrypted data to be
  exchanged between one, two or even multiple entities
  (multi-end-to-multi-end encryption). Therefore this XEP can be used
  to implement end-to-end encrypted &xep0045;.</p>

  <p>Unlike to similar XEPs, e.g. OMEMO, this XEP <em>does not</em>
  provide Perfect Forward Secrecy (PFS), but as advantage in return,
  allows users to read their archived converstaions (respectively
  their encrypted data) later on. Of course only as long as they still
  posses the according secret key. Perfect Forward Secrecy and being
  able to decrypt archived messages are mutually exclusive, i.e. one
  can not have both. We therefore consider this XEP complementary to
  similar ones which also provide end-to-end encryption but with a
  different feature set.</p>

</section1>

<section1 topic='Glossary' anchor='glossary'>

  <dl>
    <di><dt>PEP</dt><dd>Personal Eventing Protocol (XEP-0163)</dd></di>
    <di><dt>Public key PEP node</dt><dd>A PEP node containing an entities publicy OpenPGP key.</dd></di>
    <di><dt>Secret key PEP node</dt><dd>A PEP node containing an entities encrypted secret OpenPGP key.</dd></di>
  </dl>

</section1>

<section1 topic='OpenPGP Encrypted and Signed Data' anchor='signcrypt'>

  <section2 topic='Exchanging OpenPGP Encrypted and Signed Data' anchor='exchange'>

    <p>The &openpgp; extension element qualified by the
    'urn:xmpp:openpgp:0' namespace is used in order to exchange
    encrypted and signed data.</p>

    <example caption='The &openpgp; extension within a message.'><![CDATA[
<message to='juliet@example.org'>
  <openpgp xmlns='urn:xmpp:openpgp:0'>
    <!-- BASE64_OPENPGP_MESSAGE -->
    WdC81xuET8kAK...
  </openpgp>
</message>]]></example>

    <p>The text content of the &openpgp; element
    (BASE64_OPENPGP_MESSAGE) is a Base64 encoded OpenPGP message which
    contains an encrypted and signed UTF-8 encoded string. Note that
    OpenPGP's ASCII armor is not used, instead the XMPP client MUST
    encode the raw OpenPGP message, as specified in &rfc4880;, using
    Base64. This string represents a &signcrypt; extension element. It
    SHOULD also be encrypted to self. Encryption is REQUIRED and
    signing the data is RECOMMENDED.</p>

    <example caption='The &signcrypt; extension element.'><![CDATA[
<signcrypt xmlns='urn:xmpp:openpgp:0'
           to='juliet@example.org'
           timestamp='2014-07-10T17:06:00+02:00'
           rpad='f0rm1l4n4-mT8y33j!Y%fRSrcd^ZE4Q7VDt1L%WEgR!kv'>
  <body xmlns='jabber:client'>
    This is a secret message.
  </body>
</signcrypt>]]></example>

    <p>The &signcrypt; element MUST posses at least one 'to' and
    exactly one 'timestamp' attribute. The 'to' element(s) MUST
    contain the intended recipient's XMPP address of the signed and
    encrypted data to prevent Surreptitious Forward Attacks. The XMPP
    address found in the 'to' attribute SHOULD be without Resourcepart
    (i.e. a bare JID). The 'timestamp' attribute contains the
    timestamp when the &signcrypt; element was signed and encrypted in
    the DateTime format as specified in &xep0082; § 3.2. The
    &signcrypt; element SHOULD furthermore contain a 'rpad' attribute
    which value is a random-length random-content padding.</p>

    <p>The child elements of &signcrypt; can be seen as stanza
    extension elements which are encrypted and (eventually)
    signed. After the &signcrypt; element was verified they SHOULD be
    processed similar as if they had been direct extensions elements
    of the stanza. For example, direct child elements of &signcrypt;
    could be:</p>

    <ul>
      <li>&rfc6121;: § 5.2.3: &lt;body xmlns='jabber:client'/&gt; </li>
      <li>&xep0085;: &lt;active xmlns='http://jabber.org/protocol/chatstates'/&gt;</li>
      <li>&xep0071;: &lt;html xmlns='http://jabber.org/protocol/xhtml-im'/&gt;</li>
    </ul>

    <p>But just as with stanza extension elements, child elements of
    &signcrypt; can be any extension element. The example above uses
    the &lt;body/&gt; element as defined in RFC 6121. Note that it
    uses 'jabber:client' as namespace, but since the same
    &lt;body/&gt; element is also defined in the 'jabber:server'
    namespace, recipients MUST accept both.</p>
  </section2>

  <section2 topic='Verification of &signcrypt;' anchor='signcrypt-verificaton'>

    <p>Recipients MUST verify that the signature corresponds to the
    sending XMPP address's key. Thus the recipient may need retrieve
    the key from the Personal Eventing Protocol node as described
    above. Furthermore recipients are RECOMMENDED to verify the values
    of the 'to' and 'timestamp' attributes for plausability or to
    display them to a user for verification.</p>

  </section2>

  <section2 topic='Discovering Support' anchor='disco'>
    <p>If an entity supports exchanging OpenPGP encrypted and signed
    data over XMPP as specified herein, it MUST report that fact by
    including a service discovery feature of 'urn:xmpp:openpgp:0' in
    response to a &xep0030; information request.</p>

  <example caption="Service Discovery information request"><![CDATA[
<iq type='get'
    from='juliet@example.org/balcony'
    to='romeo@example.org/orchard'
    id='disco1'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>]]></example>
  <example caption="Service Discovery information response"><![CDATA[
<iq type='result'
    from='romeo@example.org/orchard'
    to='juliet@example.org/balcony'
    id='disco1'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    ...
    <feature var='urn:xmpp:openpgp:0'/>
    ...
  </query>
</iq>]]></example>

  </section2>

</section1>

<section1 topic='Announcing and Discovering the Public Key via PEP' anchor='annoucing-discover-pubkey'>

  <p>Parties interested in exchanging encrypted data between each
  other via OpenPGP need to know the public key(s) of the
  recipients. The following section specifies a mechanism to announce
  and discover publicy keys.</p>

  <section2 topic='Annoucning the Public Key via PEP' anchor='annoucning-pubkey'>

    <p>In order to annouce the public key, the client needs to store it
    in a PEP node. The public key data, as specified in RFC 4880, is
    stored within a &lt;pubkey/&gt; element which is a child element of
    the &lt;pubkeys/&gt; element qualified by the 'urn:xmpp:openpgp:0'
    namespace. Note that OpenPGP's ASCII armor is not used, instead the
    XMPP client MUST encode the public key using Base64. Client SHOULD
    only try to store the public key if the Personal Eventing Protocol
    service supports persistent-items, thus it SHOULD check if the
    service reports the
    'http://jabber.org/protocol/pubsub#persistent-items' feature.</p>

    <example caption='Saving the public key in the PEP node.'><![CDATA[
<iq from='juliet@example.org/balcony' type='set' id='1'>
  <pubsub>
     <publish node='urn:xmpp:openpgp:0'>
        <item>
          <pubkeys xmlns='urn:xmpp:openpgp:0'>
            <pubkey>
              <!-- BASE64_OPENPGP_PUBLIC_KEY -->
              YWJjMTIzIT8kK...
            </pubkey>
          </pubkeys>
         </item>
      </publish>
    </pubsub>
</iq>]]></example>

  </section2>

  <section2 topic='Discovering the Public Key via PEP' anchro='discover-pubkey'>

    <p>In order to discover the public key of an XMPP entity, clients
     send a PubSub &IQ; request to the entity's bare JID of which it
    wants to know the public key.</p>

    <example caption='Requesting a OpenPGP public key from an XMPP entity.'><![CDATA[
<iq from='romeo@example.org/orchard'
    to='juliet@example.org'
    type='get'
    id='getpub'>
  <pubsub>
    <items node='urn:xmpp:openpgp:0'
           max_items='1'/>
  </pubsub>
</iq>]]></example>
    <example caption='Personal Eventing Protocol result containing the requested public key.'><![CDATA[
<iq from='juliet@example.org'
    to='romeo@example.org/orchard'
    type='result'
    id='getpub'>
  <pubsub>
    <publish node='urn:xmpp:openpgp:0'>
      <item>
        <pubkeys xmlns='urn:xmpp:openpgp:0'>
          <pubkey>
            <!-- BASE64_OPENPGP_PUBLIC_KEY -->
            YWJjMTIzIT8kK...
          </pubkey>
        </pubkeys>
      </item>
    </publish>
  </pubsub>
  </iq>]]></example>

    <p>Note that the result may contain multiple pubkeys elements. Only
    the public keys found in the most recent MUST be used. Requestors
    may want to limit the results to the most recent item using the
    'max_items' attribute set to '1'. (Note: RSM would be an alternative
    but XEP-60 says it is not yet mandatory).</p>

    <p>Some XMPP services may not provide the Personal Eventing
    Protocol feature required to provide the mechanism described
    here. If so, they will return an &IQ; error of type
    service-unavailable.</p>

  </section2>

</section1>

<section1 topic='Synchronizing the Secret Key with a Private PEP Node' anchor='synchro-pep'>

    <p>A private PEP node is used to allow XMPP clients to synchronize
    the used secret OpenPGP key. Where private PEP node means: A PEP
    node in whitelist mode where only the bare JID of the key owner is
    whitelisted as described in &xep0223;. The secret key is additionally encrypted.</p>

    <section2 topic='Required PEP features'>

      <p>The used PEP server MUST support PEP and the whitelist access
       model. It SHOULD also support persitent items</p>

       <section3 topic='Discovering support'>

         <example caption='Account owner queries server regarding protocol support'><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    to='juliet@capulet.lit'
    id='disco1'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>

        <p>The service discovery result must contain an PEP identity
        '&lt;identity category='pubsub' type='pep'/&gt;, and the
        'http://jabber.org/protocol/pubsub#access-whitelist'
        feature. Ideally it also contains the
        'http://jabber.org/protocol/pubsub#persistent-items'
        feature</p>

        <example caption='Server communicates protocol support'><![CDATA[
<iq from='juliet@capulet.lit'
    to='juliet@capulet.lit/balcony'
    id='disco1'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='account' type='registered'/>
    <identity category='pubsub' type='pep'/>
    <feature var='http://jabber.org/protocol/pubsub#access-presence'/>
    <feature var='http://jabber.org/protocol/pubsub#auto-create'/>
    <feature var='http://jabber.org/protocol/pubsub#auto-subscribe'/>
    <feature var='http://jabber.org/protocol/pubsub#config-node'/>
    <feature var='http://jabber.org/protocol/pubsub#create-and-configure'/>
    <feature var='http://jabber.org/protocol/pubsub#create-nodes'/>
    <feature var='http://jabber.org/protocol/pubsub#filtered-notifications'/>
    <feature var='http://jabber.org/protocol/pubsub#persistent-items'/>
    <feature var='http://jabber.org/protocol/pubsub#publish'/>
    <feature var='http://jabber.org/protocol/pubsub#retrieve-items'/>
    <feature var='http://jabber.org/protocol/pubsub#subscribe'/>
    ...
  </query>
</iq>]]></example>

       </section3>

    </section2>

    <section2 topic='Requesting Information About the Secret Key PEP Node' anchro='req-info-secret-pep-node'>

      <p>In order to synchronize the secret key over a private PEP node,
      clients first need to discover and verify the node for the correct
      settings.</p>

      <section3 topic='Client Sends Request'>

  <example caption='Requesting the user&apos;s secret key.'><![CDATA[
<iq from='romeo@example.org/orchard'
    to='juliet@example.org'
    type='get'
    id='getsecret'>
  <pubsub>
    <items node='urn:xmpp:openpgp:secret-key:0'
           max_items='1'/>
  </pubsub>
</iq>]]></example>

      </section3>
      <section3 topic='PEP Service Success Response'>

  <example caption='Personal Eventing Protocol result containing the requested public key.'><![CDATA[
<iq from='juliet@example.org'
    to='romeo@example.org/orchard'
    type='result'
    id='getsecret'>
  <pubsub>
    <publish node='urn:xmpp:openpgp:secret-key:0'>
      <item>
        <secretkey xmlns='urn:xmpp:openpgp:0'>
            <!-- BASE64_OPENPGP_ENCRYPTED_SECRET_KEY -->
            8afaqse73adf...
        </secretkey>
      </item>
    </publish>
  </pubsub>
</iq>]]></example>

      </section3>
      <section3 topic='PEP Node Does Not Exist Response'>

        <p>If the node does not exist, the client MUST create it with
        an whitelist access model.</p>

      </section3>

      <section3 topic='PEP Not Supported'>
      </section3>

    </section2>
    <section2 topic='Creating the Secret Key PEP Node'>

      <example caption='Client creates secret key PEP node'><![CDATA[
<iq type='set'
    from='juliet@example.org/balcony'
    id='create-node'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <create node='urn:xmpp:openpgp:secret-key:0'/>
      <configure>
        <x xmlns='jabber:x:data' type='submit'>
          <field var='FORM_TYPE' type='hidden'>
            <value>http://jabber.org/protocol/pubsub#node_config</value>
          </field>
          <field var='pubsub#access_model'>
            <value>whitelist</value>
          </field>
        </x>
      </configure>
    </pubsub>
</iq>]]></example>
      <example caption='Service informs requesting entity of success'><![CDATA[
<iq type='result'
    to='juliet@example.org/balcony'
    id='create-node'/>]]></example>

      <p>The node is now created and the only affiliated entity is the
      bare JID of the user, who created the node, with an affiliation as
      'owner'.</p>

      <p>TODO: Describe encryption format of secret key in node
      (Dominink)</p>

    </section2>
</section1>
  <!--
  <section2 topic='Possible Alternative: Synchronizing the secret key via Private XML Storage' anchor='synchro-private-xml'>
    <p>To allow new XMPP clients to easily retrieve (and eventually
    update) the secret key, &xep0049; is used as synchronization
    mechanism. The secret key MUST be a OpenPGP symmetrically encrypted
    message with a backup code.</p>
    <p>TODO describe format as per
    https://github.com/open-keychain/open-keychain/wiki/Backups)</p>
    <p>In order to set a new secret key, clients store the encrypted
    backup key as Base64 encoded raw OpenPGP message within an
    &lt;secretkey/&gt; element qualified by the 'urn:xmpp:openpgp:0'
    namespace.</p>
    <example caption='Client stores backup key in private XML storage.'><![CDATA[
<iq type='set' id='priv1'>
  <query xmlns='jabber:iq:private'>
    <secretkey xmlns='urn:xmpp:openpgp:0'/>
      <!-\- BASE64_OPENPGP_ENCRYPTED_SECRET_KEY -/->
      8afaqse73adf...
    </secretkey>
  </query>
</iq>]]></example>
    <p>New clients then later can retrieve the stored encrypted secret key.</p>
    <example caption='Client retrieves encrypted secret key from private XML storage.'><![CDATA[
<iq type='get' id='priv2'>
  <query xmlns='jabber:iq:private'>
    <secretkey xmlns='urn:xmpp:openpgp:0'/>
  </query>
  </iq>]]></example>
    <example caption='Client Stores Private Data'><![CDATA[
<iq type='result' id='priv2'>
  <query xmlns='jabber:iq:private'>
    <secretkey xmlns='urn:xmpp:openpgp:0'>
      <!-\- BASE64_OPENPGP_ENCRYPTED_SECRET_KEY -/->
      8afaqse73adf...
    </secretkey>
  </query>
</iq>]]></example>
  </section2>
  -->
<section1 topic='Rationale and Additional Rules' anchor='rationale'>

  <section2 topic='Key Handling' anchor='key-handling'>

    <p>This specificaiton leaves it open if the used OpenPGP key
    should be a primary key or a subkey. It is even possible to
    announce multiple public keys in the Personal Eventing Protocol
    node. Implementations MUST be prepared to find multiple public
    keys. The authors however believe that for ease of use only one
    OpenPGP key specially crafted for the XMPP uses case should be
    created.</p>

  </section2>

  <section2 topic='&openpgp; and &signcrypt; Design' anchor='openpgp-signcrypt-design'>

    <p>The &openpgp; and &signcrypt; elements are container elements
    for arbitrary signed and encrypted data and can thus act as
    building blocks for encrpyted data included in Message, IQ and
    Presence stanzas. For example, future specifications may use
    &signcrypt; to implement encrypted versions of &xep0047; or
    &xep0261;.</p>

    <p>Note that signed OpenPGP messages already contains a timestamp
    as per the OpenPGP specification. The &signcrypt; element
    nevertheless contains a mandatory 'timestamp' attribute because
    not every OpenPGP API may provide access to the embedded OpenPGP
    timestamp.</p>

    <p>The 'rpad' attribute of the &signcrypt; element exists to
    prevent length-base side channel attacks.</p>

  </section2>

  <section2 topic='Addressing the Issues and Problems of XEP-0027' anchor='solving-xep0027-issues'>
    <p>This specification addresses all relevant issues of
    XEP-0027. It prevents reply attacks my including the recipient(s)
    and a timestamp in the &signcrypt; element. It allows for both,
    signing and encrypting of the &signcrypt; element. On the other
    hand, the scope of the specification was intentionally limited to
    OpenPGP only.</p>
    <p>Features like signed presences, which is provided by XEP-0027,
    may be added later on as add-on XEP to this.</p>
  </section2>

  <section2 topic='OpenPGP Packet Format Version Restriction' anchor='openpgp-packet-format-version'>

    <p>Implementations of this XEP must generate and accept only
    version 4 (or higher) OpenPGP packets. Lower version OpenPGP
    packets are insecure in many aspects(see for example RFC 4880 §
    5.5.2.).</p>

  </section2>

</section1>

<section1 topic='Implementors Advice' anchor='implementors-advice'>
  <p>OpenPGP implementations have a sad history of being not very
  userfriendly. Implementors should read <span class='ref'><link
  url='http://g10code.com/steed.html'>STEED</link></span><note>Koch,
  Werner, and Marcus Brinkman "STEED — Usable End-to-End Encryption",
  White Paper, g10 GmbH, 2011-10-17. &lt;<link
  url='http://g10code.com/steed.html'>http://g10code.com/steed.html</link>&gt;</note>
  and <span class='ref'><link
  url='https://www.cs.berkeley.edu/~tygar/papers/Why_Johnny_Cant_Encrypt/OReilly.pdf'>"Why
  Johnny can't encrypt"</link></span><note>Whitten, Alma, and J. Doug
  Tygar. "Why Johnny Can't Encrypt: A Usability Evaluation of PGP
  5.0." Usenix Security. Vol. 1999. 1999. &lt;<link
  url='https://www.cs.berkeley.edu/~tygar/papers/Why_Johnny_Cant_Encrypt/OReilly.pdf'>https://www.cs.berkeley.edu/~tygar/papers/Why_Johnny_Cant_Encrypt/OReilly.pdf</link>&gt;</note>. Mention
  a few leassons learned from there and how they apply to this
  XEP.</p>

  <p>Implementors should be aware that the size OpenPGP public and
  secure keys is somewhere in the range of tenth of
  kilobytes. Applying Base64 encoding on keys, as it is described
  herin, further increases the size. The formular to determine the
  Base64 encoded size is: ceil(bytes / 3) * 4. Thus the lower bound
  for the maximum stanza size of 10000 bytes, as specified in RFC 6120
  § 13.12. 4., is usually exceeded. However all XMPP server
  implementations the authors are aware of, follow the recommendation
  of the RFC and do not blindly set the maximum stanza size to such a
  low value, but use a much higher threshold. Therefore this should
  hardly be an issue for implementations. Nevertheless implementors
  are still adviced to handle &lt;policy-violation/&gt; error
  responses when trying to transmit Base64 encoded keys.</p>

</section1>

<section1 topic='Security Considerations' anchor='security'>

  <p>The scope of this XEP is intentionally limited, so that the
  specification just defines way for XMPP entities to discover,
  announce and synchronize OpenPGP keys, and how to exchange signed
  and encrypted data between two or more parties. Everything else is
  outside its scope. For example, how "secure' the key material is
  protected on the endpoints is up to the implementation.</p>

  <p>And while this XEP specifies a mechanism how to discover and
  retrieve a public key, it does not define how the trust relation to
  this key should be established. Even if key discovery and retrieval
  over XMPP provides a stronger coupling between the possessing entity
  (the XMPP address) and the key, as compared to the OpenPGP keyservers,
  how a XMPP server authenticates a remote server is a server policy,
  which does vary from server to server. Implementation MUST provide a
  way for the user to establish and assign trust to a public key. For
  example by using a QR code shown on the other user's device's
  screen.</p>

  <p>Besides the protocol defined herin, OpenPGP implementations are
  another big attack surface. Needless to say that the security of
  encrypted data exchanged using this protocol depends on the security
  of the used OpenPGP implementation. It is strongly RECOMMENED to use
  existing implementations instead of writing your own. Reusing
  existing maintained codebases increases the chances to discovery
  vulnerabilities. OpenPGP implementations have suffered from various
  vulnerabilities in the past which open up DoS attack vectors. For
  example <link
  url='https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4402'>CVE-2013-4402</link>
  and <link
  url='https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-4617'>CVE-2014-4717</link>.</p>

</section1>

<section1 topic='IANA Considerations' anchor='iana'>

  <p>This document requires no interaction with &IANA;.</p>

</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>

  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>

	<p>The &REGISTRAR; includes 'urn:xmpp:openpgp:0' in its registry of protocol namespaces (see &NAMESPACES;).</p>

  </section2>

</section1>

<section1 topic='XML Schema' anchor='schema'>

  <p>TODO: Add after the XEP leaves the 'experimental' state.</p>

</section1>

<section1 topic='Acknowledgements' anchor='acknowledgements'>

  <p>The first draft of this specification was worked out and written
  on the wall of the 'Kymera' room in one of Google's buildings by the
  authors, consisting of members of the XMPP Standards Foundation and
  the OpenKeychain project, at the GSOC Mentors Summit 2015. The
  authors would like to thank Google for making it possible by
  bringing the right people together.</p>

</section1>
</xep>
