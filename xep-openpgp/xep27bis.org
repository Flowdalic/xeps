XEP27bis

Same Primary/Sub-key for all devices
Store and announce Key in PEP Node
Always sign and encrypt -> signcrypt
Include XEP-0082 Timestamps (creation time)
Provide private key synchronization
over xep49?

The XEP: OpenPGP for XMPP

1. Introduction

Using OpenPGP which XMPP solves a lot of issues:
key discovery: discovery keys of people by PEP
key synchronization: synchronize your private key over multiple devices
This XEP is an alterantive to similar XEPs, e.g. OMEMO, providing *no* Perfect Forward Secrecy but thus allowing users to read their archived conversations later on (as long as they still posses the according private key)

2. Requirements

3. Glossary

4. Use Cases

4.1 Discoverying Support

In order to determine whether a given contact has devices that support OpenPGP, the devicelist node in PEP is consulted. 
TODO example IQ request reponse

TODO feature discovery of individual XMPP entity?

4.2 Synchronizing the private key

Optional feature using XEP-0049 (and/or its successor) to synchronize thes private key. OpenPGP symetric encrypted packet with backup code: https://github.com/open-keychain/open-keychain/wiki/Backups

4.3 Publishing the public key to a PEP node

<iq type=set id=1
  <pubsub
     <publis node=urn:xmpp:openpgp:0
        <item
          <pubkey xmlns=urn:xmpp:openpgp:0
            BASE64_PUBLIC_KEY
          </pubkey>
        </item>
      </publish>
    </pubsub>
</iq>

<iq type=get to=bareJid id=2>
  <pubsub
    <items node=urn:xmpp:openpgp:0

<iq type=result

4.4 Encrypted and signed messages

Annotations:
* do base64 in XMPP-Client (same like for other XMPP messages)
* OpenPGP binary, no usage of ASCII Armor (misfeature in PGP/MIME), ASCII armor would indicate the type, that has already been defined by the XML tag

<message to= from=
  <openpgp xmlns=urn:xmpp:openpgp:0
  BASE64_OPENPGP_BLOB
  </openpgp
<message

BASE64_OPENPGP_BLOB Descriptions:

<signcrypt to=[bare JID of recipient] timestamp=[XEP-82 timestamp]
  <body>
    Secret Message
  </body>
</signcrypt>

<body/> is the only defined element (as of now)
contains human readable text (same definition as <body/> from XMPP-IM
child elements of singcrypt can basically be everything
to element in <signcrypt/> exists to prevent the Surreptitious Forward Attack
binary blob should be encrypted to self
signed OpenPGP binary blobs already contain a timestamp, no need to add a timestap attribute
timestamp is used to mitigate replay attacks
Recipients MUST verify 'from' with the help of signaturers OpenPGP key block's  User ID: xmpp:user@example.org
MUST always encrypt to self

5. Rationale

This specification leaves it open if the used OpenPGP key should be a primary key or a subkey. This is intentional, because .TODO

5.1 Addressing the issues and problems of XEP-0027

When the recipient is not mentioned in the encrypted body, replay attacks are possible on messages.
Include the recipients JID (always bare?) into the encrypted/signed part

It relies on signing or encryption of XML character data; therefore, it does not support signing or encryption of <iq/> stanzas, and it allows signing of the presence <status/> element and encryption of the message <body/> element only. Thus the method is not acceptable when signing or encryption of full stanzas is required.
Define payload element with variade

It does not enable both signing and encryption of a stanza, only signing of the presence status and encryption of the message body.
allow both

It is limited to PGP keys and does not support X.509 certificates, Kerberos, RSA keys, etc.
So be it

It does not include feature negotiation; instead, signed <presence/> is used as an indicator of support. Because of the lack of negotiation it is possible for encrypted <message/> elements to be stored offline and then read by a client that cannot support them.
Add feature negotiation

It is verbose (the example encrypted <message/> is "Hi").

9. Acknowledgements

The first draft of this specification was worked out and written on the wall of the "Kymera" room in one of Google's buildings by the authors consisting of members of the XMPP Standards Foundation and the OpenKeychain project at the GSOC Mentors Summit 2015. The authors would like to thank Google for making it possible by bringing the right people together.

OpenKeychain API requirements
get public key for PEP
automatic key generation? based on User ID (xmpp:user@example.org) where ID cannot be changed
sync of private key backup (Backup Code should never be exposed over API) only the encrypted Backup
